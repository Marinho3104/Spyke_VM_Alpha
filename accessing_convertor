switch (__ast_node_accessing->accessing->node_type)
    {
    case AST_NODE_VARIABLE: 

        {

            bool _prev_force_allocation_value = __convertor->force_memory_allocation; __convertor->force_memory_allocation = 1;
            bool _prev_call_value = __convertor->only_call; __convertor->only_call = 1;

            set_byte_code_of_ast(
                __convertor,
                __ast_node_accessing->value
            );

            __convertor->force_memory_allocation = _prev_force_allocation_value;
            __convertor->only_call = _prev_call_value;

            __convertor->current_block->block->last->object->argument -= 
                ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->representive_type->declaration->get_variable_off(
                    ((Ast_Node_Variable*)__ast_node_accessing->accessing)->variable_declaration
                );
        
            break;

        }

    case AST_NODE_FUNCTION_CALL: 

        {
    
            bool _prev_force_allocation_value = __convertor->force_memory_allocation; __convertor->force_memory_allocation = 0;
            bool _prev_call_value = __convertor->only_call; __convertor->only_call = 0;

            set_byte_code_of_ast(
                __convertor,
                __ast_node_accessing->accessing
            );

            __convertor->force_memory_allocation = _prev_force_allocation_value;
            __convertor->only_call = _prev_call_value;
            
        
            break;

        }

    case AST_NODE_ACCESSING: 
    
        // switch (((Ast_Node_Accessing*) __ast_node_accessing->accessing)->)
        // {
        // case /* constant-expression */:
        //     /* code */
        //     break;
        
        // default:
        //     break;
        // }
    
    
    break;
    default: break;
    }

    // __convertor->current_block->block->last->object->print();

    // exit(1);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



    if ( ( (Ast_Node_Accessing*)__ast_node_accessing->accessing )->value->node_type == AST_NODE_FUNCTION_CALL ) {

            __convertor->current_block->block->add(
                byte_code::Byte_Code::generate(
                    LOAD,
                    __ast_node_accessing->representive_type->get_size()
                )
            );

            __convertor->current_block->block->add(
                byte_code::Byte_Code::generate(
                    LOAD,
                    __convertor->current_block->current_stack_size - _backup_stack_size + 
                        __ast_node_accessing->representive_type->get_size()
                )
            );

            __convertor->current_block->block->add(
                byte_code::Byte_Code::generate(
                    MEMORY_COPY,
                    __ast_node_accessing->representive_type->get_size()
                )
            );

            __convertor->current_block->block->add(
                byte_code::Byte_Code::generate(
                    STACK_MEMORY_DEALLOCATION,
                    __convertor->current_block->current_stack_size - _backup_stack_size + 
                        __ast_node_accessing->representive_type->get_size()
                )
            );

            __convertor->current_block->current_stack_size = 
                _backup_stack_size + 
                        __ast_node_accessing->representive_type->get_size();

        }



        if (__first && __ast_node_accessing->value->node_type == AST_NODE_FUNCTION_CALL ) {

        __convertor->current_block->block->add(
            byte_code::Byte_Code::generate(
                LOAD,
                __ast_node_accessing->representive_type->get_size()
            )
        );

        __convertor->current_block->block->add(
            byte_code::Byte_Code::generate(
                LOAD,
                __convertor->current_block->current_stack_size - _backup_stack_size + 
                    __ast_node_accessing->representive_type->get_size()
            )
        );

        __convertor->current_block->block->add(
            byte_code::Byte_Code::generate(
                MEMORY_COPY,
                __ast_node_accessing->representive_type->get_size()
            )
        );

        __convertor->current_block->block->add(
            byte_code::Byte_Code::generate(
                STACK_MEMORY_DEALLOCATION,
                __convertor->current_block->current_stack_size - _backup_stack_size + 
                    __ast_node_accessing->representive_type->get_size()
            )
        );

        __convertor->current_block->current_stack_size = 
            _backup_stack_size + 
                   __ast_node_accessing->representive_type->get_size();

    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    switch (__ast_node_accessing->accessing->node_type)
    {

        case AST_NODE_VARIABLE:

            {

                if (__first) {

                
                    bool _prev_call_value = __convertor->only_call; __convertor->only_call = 1;

                        set_byte_code_of_ast(
                            __convertor,
                            __ast_node_accessing->value
                        );

                    __convertor->only_call = _prev_call_value;

                }

                __convertor->current_block->block->last->object->argument -= 
                    ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->representive_type->declaration->get_variable_off(
                        ((Ast_Node_Variable*)__ast_node_accessing->accessing)->variable_declaration
                    );
            
                break;

            }

        case AST_NODE_FUNCTION_CALL:

            {

                bool _prev_force_allocation_value = __convertor->force_memory_allocation; __convertor->force_memory_allocation = 0;
                bool _prev_call_value = __convertor->only_call; __convertor->only_call = 1;

                set_byte_code_of_ast(
                    __convertor,
                    __ast_node_accessing->accessing
                );

                __convertor->force_memory_allocation = _prev_force_allocation_value;
                __convertor->only_call = _prev_call_value;
                
            
                break;

            }

        case AST_NODE_ACCESSING: 

            {

                bool _prev_force_allocation_value = __convertor->force_memory_allocation; __convertor->force_memory_allocation = 1;
                bool _prev_call_value = __convertor->only_call; __convertor->only_call = 1;

                set_byte_code_of_ast(
                    __convertor,
                    __ast_node_accessing->accessing
                );

                __convertor->force_memory_allocation = _prev_force_allocation_value;
                __convertor->only_call = _prev_call_value;

                

            }

    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    void parser::set_byte_code_of_ast_node_variable(Convertor* __convertor, Ast_Node_Variable* __ast_node_variable, int __off, int __size) {

    __convertor->print("--> Get Byte Code Of Ast Node Variable - With Off <--");

    __convertor->current_block->block->add(
        byte_code::Byte_Code::generate(
            LOAD,
            __convertor->current_block->current_stack_size - __ast_node_variable->variable_declaration->stack_position - __off
        )
    );

    if (__convertor->only_call) return;

    __convertor->current_block->block->add(
        byte_code::Byte_Code::generate(
            LOAD,
            0
        )
    );

    __convertor->current_block->block->add(
        byte_code::Byte_Code::generate(
            MEMORY_COPY,
            __size
        )
    );

}



set_byte_code_of_ast_node_variable(
                    __convertor,
                    (Ast_Node_Variable*) __ast_node_accessing->value,
                    ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->representive_type->declaration->get_variable_off(
                        ((Ast_Node_Variable*)__ast_node_accessing->accessing)->variable_declaration
                    ),
                    ((Ast_Node_Variable*)__ast_node_accessing->accessing)->representive_type->get_size()
                );
                
                
                
                
                
                
                
                
                
                switch (__ast_node_accessing->accessing->node_type)
    {

        case AST_NODE_VARIABLE:

            if (__first) {

                set_byte_code_of_ast(
                    __convertor,
                    __ast_node_accessing->value
                );

            }

            else {

                __convertor->current_block->block->last->object->argument -= 
                    ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->representive_type->declaration->get_variable_off(
                        ((Ast_Node_Variable*)__ast_node_accessing->accessing)->variable_declaration
                    );

            }

            break;

        case AST_NODE_FUNCTION_CALL:



            break;

        case AST_NODE_ACCESSING:

            {

                if (__first) {

                    bool _prev_force_allocation_value = __convertor->force_memory_allocation; __convertor->force_memory_allocation = 1;
                    bool _prev_call_value = __convertor->only_call; __convertor->only_call = 1;

                    set_byte_code_of_ast(
                        __convertor,
                        __ast_node_accessing->value
                    );

                    __convertor->force_memory_allocation = _prev_force_allocation_value;
                    __convertor->only_call = _prev_call_value;

                }

                switch ( ( (Ast_Node_Accessing*)__ast_node_accessing->accessing)->value->node_type )
                {
                case AST_NODE_VARIABLE: 
                
                    __convertor->current_block->block->last->object->argument -= 
                        ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->representive_type->declaration->get_variable_off(
                            ((Ast_Node_Variable*) ( (Ast_Node_Accessing*)__ast_node_accessing->accessing)->value )->variable_declaration
                        );

                    ((Ast_Node_Variable*)__ast_node_accessing->value)->variable_declaration->stack_position = 
                        __convertor->current_block->current_stack_size - __convertor->current_block->block->last->object->argument;
                
                    break;

                case AST_NODE_FUNCTION_CALL: 
                default: exit(1); break;
                }

                set_byte_code_of_ast_node_accessing(
                    __convertor,
                    (Ast_Node_Accessing*) __ast_node_accessing->accessing,
                    0
                );

            }


            break;

        default: exit(1);

    }
