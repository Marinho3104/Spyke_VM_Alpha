utils::Linked_List <Type_Information*>* _parameters_type = new utils::Linked_List <Type_Information*>(0);

    utils::Linked_List <Ast_Node*>* _values = values->get_copy(0);
    utils::Linked_List <Token*>* _token_ids = token_ids->get_copy(0);

    Ast_Node_Function_Declaration* _function_declaration_node;

    int _current_priority = 0;

    if (!_token_ids->count && _values->count == 1) destroy_expression_instructions = 0;

    else if (_token_ids->count == 1 && _values->count == 1) {

        __ast->add_to_chain(
            _values->operator[](0)->representive_type->pointer_level ?
                __ast->name_space_control->get_primitive_type_name_space(
                    __ast, PRIMITIVE_TYPE_POINTER
                ) :
                _values->operator[](0)->representive_type->declaration->body->name_space
        );

        _parameters_type->add(
            _values->operator[](0)->representive_type->get_copy()
        );
        
        _parameters_type->first->object->pointer_level++;

        char* _function_name = 
            built_ins::get_struct_function_name_of_operation_id(_token_ids->operator[](0)->id);

        if (!_function_name) throw Ordinary_Exception_Ast("No Function Defined for given Toke Id");

        _function_declaration_node = 
            get_function_declaration(__ast, _function_name, _parameters_type, 0, 0);

        if (!_function_declaration_node) 
            throw Undefined_Function_Declaration_Ast(__ast->code_information, _token_ids->operator[](0), _token_ids->operator[](0)->position_information.column);

        for (int _ = 0; _ < _parameters_type->count; _++) delete _parameters_type->operator[](_);

        Ast_Node_Function_Call* _function_call_node = (Ast_Node_Function_Call*) malloc(sizeof(Ast_Node_Function_Call));

        new (_function_call_node) Ast_Node_Function_Call(
            0
        );

        Ast_Node_Pointer_Operation* _node_pointer_operation = (Ast_Node_Pointer_Operation*) malloc(sizeof(Ast_Node_Pointer_Operation));

        new (_node_pointer_operation) Ast_Node_Pointer_Operation(
            0, 1
        );

        if (_values->operator[](0)->node_type != AST_NODE_FUNCTION_CALL)

            _node_pointer_operation->destroy_value = 0;

        _node_pointer_operation->value = _values->operator[](0);

        _function_call_node->function_declaration = _function_declaration_node;

        _function_call_node->representive_type = _function_declaration_node->representive_type;

        _values->getDataLinkedList(0)->object = _function_call_node;

        _token_ids->getDataLinkedList(0)->destroy_content = 0;

        delete _token_ids->remove(0);
        _parameters_type->clean();
        free(_function_name);

        __ast->pop_from_chain();


    }

    else 

        while (_values->count != 1) {

            for (int _ = 0; _ < _values->count && _values->count != 1; _++) 

                if (
                    get_operation_priority(
                        _token_ids->operator[](_)->id
                    ) == _current_priority
                ) {

                    __ast->add_to_chain(
                        _values->operator[](_)->representive_type->pointer_level ?
                            __ast->name_space_control->get_primitive_type_name_space(
                                __ast, PRIMITIVE_TYPE_POINTER
                            ) :
                            _values->operator[](_)->representive_type->declaration->body->name_space
                    );

                    _parameters_type->add(
                        _values->operator[](_)->representive_type->get_copy()
                    );
                    
                    // if (!_values->operator[](_)->representive_type->pointer_level)
                    _parameters_type->first->object->pointer_level++;

                    _parameters_type->add(
                        _values->operator[](_ + 1)->representive_type->get_copy()
                    );

                    if (_values->operator[](_)->representive_type->pointer_level) {

                        _parameters_type->add(
                            Type_Information::generate_implicit_value(
                                __ast, IMPLICIT_VALUE_INT
                            )
                        );

                    }

                    char* _function_name = 
                        built_ins::get_struct_function_name_of_operation_id(_token_ids->operator[](_)->id);

                    if (!_function_name) throw Ordinary_Exception_Ast("No Function Defined for given Toke Id");

                    _function_declaration_node = 
                        get_function_declaration(__ast, _function_name, _parameters_type, 0, 0);

                    if (!_function_declaration_node) 
                        throw Undefined_Function_Declaration_Ast(__ast->code_information, _token_ids->operator[](_), _token_ids->operator[](_)->position_information.column);

                    for (int _ = 0; _ < _parameters_type->count; _++) delete _parameters_type->operator[](_);

                    Ast_Node_Function_Call* _function_call_node = (Ast_Node_Function_Call*) malloc(sizeof(Ast_Node_Function_Call));

                    new (_function_call_node) Ast_Node_Function_Call(
                        0
                    );

                    Ast_Node_Pointer_Operation* _node_pointer_operation = (Ast_Node_Pointer_Operation*) malloc(sizeof(Ast_Node_Pointer_Operation));

                    new (_node_pointer_operation) Ast_Node_Pointer_Operation(
                        0, 1
                    );

                    // if (_values->operator[](_)->node_type != AST_NODE_FUNCTION_CALL || (_values->operator[](_)->node_type == AST_NODE_FUNCTION_CALL && ((Ast_Node_Function_Call*) _values->operator[](_))->expression_helper))

                    //     _node_pointer_operation->destroy_value = 0;

                    _node_pointer_operation->value = _values->operator[](_);

                    _node_pointer_operation->set_representive_value(__ast);

                    Ast_Node_Expression* _expression_node_first = (Ast_Node_Expression*) malloc(sizeof(Ast_Node_Expression));

                    new (_expression_node_first) Ast_Node_Expression();

                    _expression_node_first->values->add(_node_pointer_operation);

                    _expression_node_first->set_representive_type(__ast);

                    _function_call_node->parameters->add(
                        _expression_node_first
                    );


                    Ast_Node_Expression* _expression_node_second = (Ast_Node_Expression*) malloc(sizeof(Ast_Node_Expression));

                    new (_expression_node_second) Ast_Node_Expression();

                    // if (_values->operator[](_ + 1)->node_type != AST_NODE_FUNCTION_CALL || (_values->operator[](_ + 1)->node_type == AST_NODE_FUNCTION_CALL && ((Ast_Node_Function_Call*) _values->operator[](_ + 1))->expression_helper))

                    //     _expression_node_second->values->destroy_content = 0;

                    _expression_node_second->values->add(_values->operator[](_ + 1));

                    _function_call_node->parameters->add(
                        _expression_node_second
                    );

                    _expression_node_second->set_representive_type(__ast);

                    _function_call_node->function_declaration = _function_declaration_node;

                    _function_call_node->representive_type = _function_declaration_node->representive_type;

                    _values->getDataLinkedList(_)->object = _function_call_node;

                    _values->getDataLinkedList(_ + 1)->destroy_content = 0;
                    _token_ids->getDataLinkedList(_)->destroy_content = 0;

                    delete _values->remove(_ + 1); delete _token_ids->remove(_);
                    _parameters_type->clean();
                    free(_function_name);

                    __ast->pop_from_chain();

                    _--;

                }

            _current_priority++;

        }

    expression_instructions = _values->operator[](0);

    representive_type = 
        _values->operator[](0)->representive_type;

    // std::cout << "Stop here " << std::endl;

    // exit(1);

    delete _parameters_type;
    delete _token_ids;
    delete _values;